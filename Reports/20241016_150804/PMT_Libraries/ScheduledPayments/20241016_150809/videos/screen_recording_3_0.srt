1
00:00:00,265 --> 00:00:05,748
1. utils.openBrowserAndNavigateToPMT()

2
00:00:05,769 --> 00:00:05,791
5. try

3
00:00:05,810 --> 00:00:05,899
1. callTestCase(findTestCase("Re-Usable Script/SchedulePayment_ConfirmWithRequest"), [:], STOP_ON_FAILURE)

4
00:00:05,900 --> 00:00:11,000
1. utils.openBrowserAndNavigateToPMT()

5
00:00:11,020 --> 00:00:11,021
5. EXCEL_PATH = "./Data Files/TestData.xlsx"

6
00:00:11,041 --> 00:00:11,042
9. TAB = "ScheduledPayment_ConfirmWithReq"

7
00:00:11,062 --> 00:00:11,124
13. testdata = getdata.fromExcel(EXCEL_PATH, TAB)

8
00:00:11,125 --> 00:00:11,126
17. for ([TestScenarioNumber = 0, TestScenarioNumber < testdata.size(), (TestScenarioNumber++)])

9
00:00:11,126 --> 00:00:11,207
1. callTestCase(findTestCase("Re-Usable Script/SchedulePayment_GetEligibility"), [:], STOP_ON_FAILURE)

10
00:00:11,207 --> 00:00:11,208
1. driver = getWebDriver()

11
00:00:11,208 --> 00:00:14,207
5. utils.goToScheduledPayments()

12
00:00:14,208 --> 00:00:14,889
9. clickGetEligibility = xpath("//a[normalize-space()='Get Eligibility']")).click()

13
00:00:14,890 --> 00:00:14,890
13. EXCEL_PATH = "./Data Files/TestData.xlsx"

14
00:00:14,892 --> 00:00:14,893
17. TAB = "ScheduledPayment_GetEligibility"

15
00:00:14,894 --> 00:00:15,880
21. utils.selectEnvironment(ENV)

16
00:00:15,880 --> 00:00:15,916
25. testdata = getdata.fromExcel(EXCEL_PATH, TAB)

17
00:00:15,917 --> 00:00:15,917
29. for ([TestScenarioNumber = 0, TestScenarioNumber < testdata.size(), (TestScenarioNumber++)])

18
00:00:15,918 --> 00:00:15,919
1. println(testdata.size())

19
00:00:15,919 --> 00:00:36,855
5. getBookingData = CreateAndRetrieveBooking.Data(EXCEL_PATH, TAB, TestScenarioNumber)

20
00:00:36,856 --> 00:00:36,856
9. println(getBookingData["BookingId"])

21
00:00:36,856 --> 00:00:36,857
13. println(getBookingData["BookingAccessToken"])

22
00:00:36,858 --> 00:00:36,858
17. println(getBookingData["PassengerId1"])

23
00:00:36,859 --> 00:00:36,859
21. println(getBookingData["PassengerId2"])

24
00:00:36,859 --> 00:00:41,863
25. delay(5)

25
00:00:41,864 --> 00:00:41,864
29. bookingIdCol = testdata["BookingId"][TestScenarioNumber]

26
00:00:41,864 --> 00:00:41,865
33. BookingId = getBookingData["BookingId"]

27
00:00:41,865 --> 00:00:41,866
37. replaceBookingId = bookingIdCol.replace("BookingId", BookingId)

28
00:00:41,866 --> 00:00:41,866
41. println(replaceBookingId)

29
00:00:41,867 --> 00:00:42,096
45. sendRequestTextBox = driver.findElement(By.xpath("//textarea[@name='req']"))

30
00:00:42,096 --> 00:00:42,120
49. sendRequestTextBox.clear()

31
00:00:42,121 --> 00:00:42,121
53. request = BookingId

32
00:00:42,121 --> 00:00:42,162
57. sendRequestTextBox.sendKeys(request)

33
00:00:42,162 --> 00:00:42,163
61. println(request)

34
00:00:42,163 --> 00:00:42,441
65. utils.clickSendButton()

35
00:00:42,442 --> 00:00:45,449
69. delay(3)

36
00:00:45,449 --> 00:00:45,690
73. response = utils.getResponse()

37
00:00:45,690 --> 00:00:45,690
77. println(response)

38
00:00:45,691 --> 00:00:45,691
81. validation1 = testdata["ContainsValidation"][TestScenarioNumber]

39
00:00:45,691 --> 00:00:45,692
85. println(validation1)

40
00:00:45,692 --> 00:00:45,692
89. validation2 = testdata["NotContainsValidation"][TestScenarioNumber]

41
00:00:45,693 --> 00:00:45,693
93. println(validation2)

42
00:00:45,693 --> 00:00:45,694
97. println(testdata["TCNumber"][TestScenarioNumber])

43
00:00:45,694 --> 00:00:45,694
101. assert response.contains(validation1)

44
00:00:45,694 --> 00:00:45,695
105. assert response.contains(validation2) == false

45
00:00:45,695 --> 00:00:45,696
109. println("Test Scenario Number: " + TestScenarioNumber)

46
00:00:45,696 --> 00:00:45,696
1. println(testdata.size())

47
00:00:45,696 --> 00:01:06,431
5. getBookingData = CreateAndRetrieveBooking.Data(EXCEL_PATH, TAB, TestScenarioNumber)

48
00:01:06,431 --> 00:01:06,432
9. println(getBookingData["BookingId"])

49
00:01:06,432 --> 00:01:06,433
13. println(getBookingData["BookingAccessToken"])

50
00:01:06,433 --> 00:01:06,434
17. println(getBookingData["PassengerId1"])

51
00:01:06,434 --> 00:01:06,435
21. println(getBookingData["PassengerId2"])

52
00:01:06,436 --> 00:01:11,439
25. delay(5)

53
00:01:11,440 --> 00:01:11,441
29. bookingIdCol = testdata["BookingId"][TestScenarioNumber]

54
00:01:11,441 --> 00:01:11,441
33. BookingId = getBookingData["BookingId"]

55
00:01:11,442 --> 00:01:11,442
37. replaceBookingId = bookingIdCol.replace("BookingId", BookingId)

56
00:01:11,442 --> 00:01:11,443
41. println(replaceBookingId)

57
00:01:11,443 --> 00:01:11,667
45. sendRequestTextBox = driver.findElement(By.xpath("//textarea[@name='req']"))

58
00:01:11,667 --> 00:01:11,687
49. sendRequestTextBox.clear()

59
00:01:11,688 --> 00:01:11,688
53. request = BookingId

60
00:01:11,688 --> 00:01:11,737
57. sendRequestTextBox.sendKeys(request)

61
00:01:11,738 --> 00:01:11,739
61. println(request)

62
00:01:11,739 --> 00:01:11,996
65. utils.clickSendButton()

63
00:01:11,996 --> 00:01:15,003
69. delay(3)

64
00:01:15,004 --> 00:01:15,229
73. response = utils.getResponse()

65
00:01:15,229 --> 00:01:15,230
77. println(response)

66
00:01:15,230 --> 00:01:15,230
81. validation1 = testdata["ContainsValidation"][TestScenarioNumber]

67
00:01:15,231 --> 00:01:15,231
85. println(validation1)

68
00:01:15,231 --> 00:01:15,232
89. validation2 = testdata["NotContainsValidation"][TestScenarioNumber]

69
00:01:15,232 --> 00:01:15,232
93. println(validation2)

70
00:01:15,232 --> 00:01:15,233
97. println(testdata["TCNumber"][TestScenarioNumber])

71
00:01:15,233 --> 00:01:15,234
101. assert response.contains(validation1)

72
00:01:15,234 --> 00:01:15,234
105. assert response.contains(validation2) == false

73
00:01:15,235 --> 00:01:15,236
109. println("Test Scenario Number: " + TestScenarioNumber)

74
00:01:15,236 --> 00:01:15,237
5. driver = getWebDriver()

75
00:01:15,237 --> 00:01:15,505
9. getConfrimWithReq = xpath("//a[normalize-space()='Confirm with Request']")).click()

76
00:01:15,506 --> 00:01:16,172
13. utils.selectEnvironment(ENV)

77
00:01:16,172 --> 00:01:16,396
17. sendRequestTextBox = driver.findElement(By.xpath("//textarea[@name='req']"))

78
00:01:16,397 --> 00:01:16,417
21. sendRequestTextBox.clear()

79
00:01:16,418 --> 00:01:16,419
25. cardNumber = testdata["cardNumber"][TestScenarioNumber]

80
00:01:16,419 --> 00:01:16,420
29. CNumber = cardNumber.replaceAll("\.0$", "")

81
00:01:16,420 --> 00:01:16,421
33. expirationMonth = testdata["expirationMonth"][TestScenarioNumber]

82
00:01:16,421 --> 00:01:16,422
37. xMonth = expirationMonth.replaceAll("\.0$", "")

83
00:01:16,422 --> 00:01:16,423
41. expirationYear = testdata["expirationYear"][TestScenarioNumber]

84
00:01:16,423 --> 00:01:16,423
45. xYear = expirationYear.replaceAll("\.0$", "")

85
00:01:16,424 --> 00:01:16,424
49. cardholderName = testdata["cardholderName"][TestScenarioNumber]

86
00:01:16,425 --> 00:01:16,425
53. addressOne = testdata["addressOne"][TestScenarioNumber]

87
00:01:16,425 --> 00:01:16,426
57. addressTwo = testdata["addressTwo"][TestScenarioNumber]

88
00:01:16,426 --> 00:01:16,426
61. city = testdata["city"][TestScenarioNumber]

89
00:01:16,427 --> 00:01:16,427
65. state = testdata["state"][TestScenarioNumber]

90
00:01:16,428 --> 00:01:16,429
69. zipCode = testdata["zipCode"][TestScenarioNumber]

91
00:01:16,429 --> 00:01:16,430
73. countryCode = testdata["countryCode"][TestScenarioNumber]

92
00:01:16,430 --> 00:01:16,431
77. action = testdata["action"][TestScenarioNumber]

93
00:01:16,431 --> 00:01:16,432
81. scheduledDate = testdata["scheduledDate"][TestScenarioNumber]

94
00:01:16,432 --> 00:01:16,433
85. xscheduledDate = scheduledDate.replaceAll("\.0$", "")

95
00:01:16,433 --> 00:01:16,434
89. totalAmount = testdata["totalAmount"][TestScenarioNumber]

96
00:01:16,434 --> 00:01:16,435
93. amount1 = testdata["amount1"][TestScenarioNumber]

97
00:01:16,435 --> 00:01:16,436
97. amount2 = testdata["amount2"][TestScenarioNumber]

98
00:01:16,437 --> 00:01:16,438
101. request = {
				  "payments": [
				    {
				      "cardInfo": {
				        "cardNumber": "$cardNumber",
				        "expirationMonth": "$expirationMonth",
				        "expirationYear": "$expirationYear",
				        "cardholderName": "$cardholderName",
				        "billingAddress": {
				          "lineOne": "$addressOne",
				          "lineTwo": "$addressTwo",
				          "city": "$city",
				          "state": "$state",
				          "zipCode": "$zipCode",
				          "countryCode": "$countryCode"
				        }
				      },
				      "scheduledPayments": [
				        {
				          "action": "$action",
				          "scheduledDate": "$scheduledDate",
				          "totalAmount": $totalAmount,
				          "passengerAmountAllocation": [
				            {
				              "passengerId": "$GlobalVariable.GuestRefNumber1",
				              "amount": $amount1
				            },
				            {
				              "passengerId": "$GlobalVariable.GuestRefNumber2",
				              "amount": $amount2
				            }
				          ]
				        }
				      ]
				    }
				  ]
				}

99
00:01:16,438 --> 00:01:16,439
105. restRequest = JsonSlurper().parseText(request)

100
00:01:16,439 --> 00:01:16,440
109. prettyJson = JsonBuilder(restRequest).toPrettyString()

101
00:01:16,441 --> 00:01:16,441
113. println(prettyJson)

102
00:01:16,442 --> 00:01:17,419
117. sendRequestTextBox.sendKeys(prettyJson)

103
00:01:17,419 --> 00:01:17,717
121. utils.clickSendButton()

104
00:01:17,718 --> 00:01:17,735
5. cancelBookingRequest = findTestObject("CancelBooking")

105
00:01:17,735 --> 00:01:18,677
9. cancelBookingResponse = sendRequest(cancelBookingRequest)

106
00:01:18,677 --> 00:01:18,679
13. cancelBookingJsonResponse = JsonSlurper().parseText(cancelBookingResponse.getResponseText())

107
00:01:18,679 --> 00:01:18,681
17. println(cancelBookingJsonResponse)

108
00:01:18,681 --> 00:01:20,836
1. utils.closeBrowser()

