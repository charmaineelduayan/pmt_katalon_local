1
00:00:00,210 --> 00:00:06,270
1. utils.openBrowserAndNavigateToPMT()

2
00:00:06,291 --> 00:00:06,312
5. try

3
00:00:06,312 --> 00:00:06,314
1. EXCEL_PATH = "./Data Files/TestData.xlsx"

4
00:00:06,314 --> 00:00:06,316
5. TAB = "ScheduledPayment_Add"

5
00:00:06,316 --> 00:00:06,404
9. testdata = getdata.fromExcel(EXCEL_PATH, TAB)

6
00:00:06,408 --> 00:00:06,412
13. for ([TestScenarioNumber = 0, TestScenarioNumber < testdata.size(), (TestScenarioNumber++)])

7
00:00:06,414 --> 00:00:06,691
1. callTestCase(findTestCase("Re-Usable Script/SchedulePayment_ConfirmWithRequest"), [:], STOP_ON_FAILURE)

8
00:00:06,691 --> 00:00:12,540
1. utils.openBrowserAndNavigateToPMT()

9
00:00:12,561 --> 00:00:12,583
5. EXCEL_PATH = "./Data Files/TestData.xlsx"

10
00:00:12,602 --> 00:00:12,605
9. TAB = "ScheduledPayment_ConfirmWithReq"

11
00:00:12,606 --> 00:00:12,689
13. testdata = getdata.fromExcel(EXCEL_PATH, TAB)

12
00:00:12,690 --> 00:00:12,693
17. for ([TestScenarioNumber = 0, TestScenarioNumber < testdata.size(), (TestScenarioNumber++)])

13
00:00:12,693 --> 00:00:12,773
1. callTestCase(findTestCase("Re-Usable Script/SchedulePayment_GetEligibility"), [:], STOP_ON_FAILURE)

14
00:00:12,774 --> 00:00:12,776
1. driver = getWebDriver()

15
00:00:12,776 --> 00:00:17,053
5. utils.goToScheduledPayments()

16
00:00:17,053 --> 00:00:18,057
9. clickGetEligibility = xpath("//a[normalize-space()='Get Eligibility']")).click()

17
00:00:18,058 --> 00:00:18,059
13. EXCEL_PATH = "./Data Files/TestData.xlsx"

18
00:00:18,059 --> 00:00:18,060
17. TAB = "ScheduledPayment_GetEligibility"

19
00:00:18,061 --> 00:00:19,529
21. utils.selectEnvironment(ENV)

20
00:00:19,530 --> 00:00:19,566
25. testdata = getdata.fromExcel(EXCEL_PATH, TAB)

21
00:00:19,566 --> 00:00:19,568
29. for ([TestScenarioNumber = 0, TestScenarioNumber < testdata.size(), (TestScenarioNumber++)])

22
00:00:19,568 --> 00:00:19,569
1. println(testdata.size())

23
00:00:19,569 --> 00:00:43,347
5. getBookingData = CreateAndRetrieveBooking.Data(EXCEL_PATH, TAB, TestScenarioNumber)

24
00:00:43,348 --> 00:00:43,349
9. println(getBookingData["BookingId"])

25
00:00:43,349 --> 00:00:43,351
13. println(getBookingData["BookingAccessToken"])

26
00:00:43,351 --> 00:00:43,352
17. println(getBookingData["PassengerId1"])

27
00:00:43,352 --> 00:00:43,352
21. println(getBookingData["PassengerId2"])

28
00:00:43,353 --> 00:00:48,358
25. delay(5)

29
00:00:48,359 --> 00:00:48,360
29. bookingIdCol = testdata["BookingId"][TestScenarioNumber]

30
00:00:48,360 --> 00:00:48,361
33. BookingId = getBookingData["BookingId"]

31
00:00:48,361 --> 00:00:48,361
37. replaceBookingId = bookingIdCol.replace("BookingId", BookingId)

32
00:00:48,362 --> 00:00:48,362
41. println(replaceBookingId)

33
00:00:48,362 --> 00:00:48,592
45. sendRequestTextBox = driver.findElement(By.xpath("//textarea[@name='req']"))

34
00:00:48,592 --> 00:00:48,624
49. sendRequestTextBox.clear()

35
00:00:48,625 --> 00:00:48,625
53. request = BookingId

36
00:00:48,626 --> 00:00:48,744
57. sendRequestTextBox.sendKeys(request)

37
00:00:48,745 --> 00:00:48,746
61. println(request)

38
00:00:48,747 --> 00:00:49,082
65. utils.clickSendButton()

39
00:00:49,083 --> 00:00:52,090
69. delay(3)

40
00:00:52,091 --> 00:00:52,336
73. response = utils.getResponse()

41
00:00:52,337 --> 00:00:52,338
77. println(response)

42
00:00:52,339 --> 00:00:52,340
81. validation1 = testdata["ContainsValidation"][TestScenarioNumber]

43
00:00:52,340 --> 00:00:52,341
85. println(validation1)

44
00:00:52,341 --> 00:00:52,342
89. validation2 = testdata["NotContainsValidation"][TestScenarioNumber]

45
00:00:52,342 --> 00:00:52,344
93. println(validation2)

46
00:00:52,344 --> 00:00:52,345
97. println(testdata["TCNumber"][TestScenarioNumber])

47
00:00:52,346 --> 00:00:52,347
101. assert response.contains(validation1)

48
00:00:52,347 --> 00:00:52,349
105. assert response.contains(validation2) == false

49
00:00:52,349 --> 00:00:52,350
109. println("Test Scenario Number: " + TestScenarioNumber)

50
00:00:52,351 --> 00:00:52,352
1. println(testdata.size())

51
00:00:52,352 --> 00:01:17,266
5. getBookingData = CreateAndRetrieveBooking.Data(EXCEL_PATH, TAB, TestScenarioNumber)

52
00:01:17,266 --> 00:01:17,267
9. println(getBookingData["BookingId"])

53
00:01:17,267 --> 00:01:17,268
13. println(getBookingData["BookingAccessToken"])

54
00:01:17,268 --> 00:01:17,269
17. println(getBookingData["PassengerId1"])

55
00:01:17,269 --> 00:01:17,269
21. println(getBookingData["PassengerId2"])

56
00:01:17,270 --> 00:01:22,275
25. delay(5)

57
00:01:22,276 --> 00:01:22,277
29. bookingIdCol = testdata["BookingId"][TestScenarioNumber]

58
00:01:22,277 --> 00:01:22,278
33. BookingId = getBookingData["BookingId"]

59
00:01:22,278 --> 00:01:22,279
37. replaceBookingId = bookingIdCol.replace("BookingId", BookingId)

60
00:01:22,279 --> 00:01:22,280
41. println(replaceBookingId)

61
00:01:22,280 --> 00:01:22,502
45. sendRequestTextBox = driver.findElement(By.xpath("//textarea[@name='req']"))

62
00:01:22,503 --> 00:01:22,549
49. sendRequestTextBox.clear()

63
00:01:22,549 --> 00:01:22,550
53. request = BookingId

64
00:01:22,550 --> 00:01:22,637
57. sendRequestTextBox.sendKeys(request)

65
00:01:22,637 --> 00:01:22,638
61. println(request)

66
00:01:22,639 --> 00:01:22,946
65. utils.clickSendButton()

67
00:01:22,946 --> 00:01:25,949
69. delay(3)

68
00:01:25,950 --> 00:01:26,182
73. response = utils.getResponse()

69
00:01:26,182 --> 00:01:26,183
77. println(response)

70
00:01:26,183 --> 00:01:26,184
81. validation1 = testdata["ContainsValidation"][TestScenarioNumber]

71
00:01:26,184 --> 00:01:26,184
85. println(validation1)

72
00:01:26,185 --> 00:01:26,185
89. validation2 = testdata["NotContainsValidation"][TestScenarioNumber]

73
00:01:26,185 --> 00:01:26,186
93. println(validation2)

74
00:01:26,186 --> 00:01:26,186
97. println(testdata["TCNumber"][TestScenarioNumber])

75
00:01:26,187 --> 00:01:26,187
101. assert response.contains(validation1)

76
00:01:26,187 --> 00:01:26,187
105. assert response.contains(validation2) == false

77
00:01:26,188 --> 00:01:26,189
109. println("Test Scenario Number: " + TestScenarioNumber)

78
00:01:26,189 --> 00:01:26,191
5. driver = getWebDriver()

79
00:01:26,191 --> 00:01:26,483
9. getConfrimWithReq = xpath("//a[normalize-space()='Confirm with Request']")).click()

80
00:01:26,484 --> 00:01:27,655
13. utils.selectEnvironment(ENV)

81
00:01:27,656 --> 00:01:27,883
17. sendRequestTextBox = driver.findElement(By.xpath("//textarea[@name='req']"))

82
00:01:27,883 --> 00:01:27,927
21. sendRequestTextBox.clear()

83
00:01:27,927 --> 00:01:27,929
25. cardNumber = testdata["cardNumber"][TestScenarioNumber]

84
00:01:27,930 --> 00:01:27,933
29. CNumber = cardNumber.replaceAll("\.0$", "")

85
00:01:27,933 --> 00:01:27,935
33. expirationMonth = testdata["expirationMonth"][TestScenarioNumber]

86
00:01:27,935 --> 00:01:27,936
37. xMonth = expirationMonth.replaceAll("\.0$", "")

87
00:01:27,937 --> 00:01:27,939
41. expirationYear = testdata["expirationYear"][TestScenarioNumber]

88
00:01:27,939 --> 00:01:27,940
45. xYear = expirationYear.replaceAll("\.0$", "")

89
00:01:27,941 --> 00:01:27,942
49. cardholderName = testdata["cardholderName"][TestScenarioNumber]

90
00:01:27,942 --> 00:01:27,944
53. addressOne = testdata["addressOne"][TestScenarioNumber]

91
00:01:27,944 --> 00:01:27,946
57. addressTwo = testdata["addressTwo"][TestScenarioNumber]

92
00:01:27,946 --> 00:01:27,949
61. city = testdata["city"][TestScenarioNumber]

93
00:01:27,949 --> 00:01:27,950
65. state = testdata["state"][TestScenarioNumber]

94
00:01:27,951 --> 00:01:27,952
69. zipCode = testdata["zipCode"][TestScenarioNumber]

95
00:01:27,953 --> 00:01:27,954
73. countryCode = testdata["countryCode"][TestScenarioNumber]

96
00:01:27,955 --> 00:01:27,957
77. action = testdata["action"][TestScenarioNumber]

97
00:01:27,957 --> 00:01:27,959
81. scheduledDate = testdata["scheduledDate"][TestScenarioNumber]

98
00:01:27,959 --> 00:01:27,960
85. xscheduledDate = scheduledDate.replaceAll("\.0$", "")

99
00:01:27,961 --> 00:01:27,962
89. totalAmount = testdata["totalAmount"][TestScenarioNumber]

100
00:01:27,962 --> 00:01:27,964
93. amount1 = testdata["amount1"][TestScenarioNumber]

101
00:01:27,964 --> 00:01:27,966
97. amount2 = testdata["amount2"][TestScenarioNumber]

102
00:01:27,966 --> 00:01:27,990
101. request = {
				  "payments": [
				    {
				      "cardInfo": {
				        "cardNumber": "$cardNumber",
				        "expirationMonth": "$expirationMonth",
				        "expirationYear": "$expirationYear",
				        "cardholderName": "$cardholderName",
				        "billingAddress": {
				          "lineOne": "$addressOne",
				          "lineTwo": "$addressTwo",
				          "city": "$city",
				          "state": "$state",
				          "zipCode": "$zipCode",
				          "countryCode": "$countryCode"
				        }
				      },
				      "scheduledPayments": [
				        {
				          "action": "$action",
				          "scheduledDate": "$scheduledDate",
				          "totalAmount": $totalAmount,
				          "passengerAmountAllocation": [
				            {
				              "passengerId": "$GlobalVariable.GuestRefNumber1",
				              "amount": $amount1
				            },
				            {
				              "passengerId": "$GlobalVariable.GuestRefNumber2",
				              "amount": $amount2
				            }
				          ]
				        }
				      ]
				    }
				  ]
				}

103
00:01:27,991 --> 00:01:27,992
105. restRequest = JsonSlurper().parseText(request)

104
00:01:27,992 --> 00:01:28,009
109. prettyJson = JsonBuilder(restRequest).toPrettyString()

105
00:01:28,010 --> 00:01:28,011
113. println(prettyJson)

106
00:01:28,011 --> 00:01:29,369
117. sendRequestTextBox.sendKeys(prettyJson)

107
00:01:29,370 --> 00:01:30,109
121. utils.clickSendButton()

108
00:01:30,109 --> 00:01:30,110
5. driver = getWebDriver()

109
00:01:30,111 --> 00:01:33,725
9. clickADD = xpath("//a[normalize-space()='Add']")).click()

110
00:01:33,726 --> 00:01:35,001
13. utils.selectEnvironment(ENV)

111
00:01:35,003 --> 00:01:35,227
17. sendRequestTextBox = driver.findElement(By.xpath("//textarea[@name='req']"))

112
00:01:35,227 --> 00:01:35,271
21. sendRequestTextBox.clear()

113
00:01:35,272 --> 00:01:35,274
25. cardNumber = testdata["cardNumber"][TestScenarioNumber]

114
00:01:35,274 --> 00:01:35,275
29. CNumber = cardNumber.replaceAll("\.0$", "")

115
00:01:35,276 --> 00:01:35,277
33. expirationMonth = testdata["expirationMonth"][TestScenarioNumber]

116
00:01:35,278 --> 00:01:35,279
37. xMonth = expirationMonth.replaceAll("\.0$", "")

117
00:01:35,280 --> 00:01:35,282
41. expirationYear = testdata["expirationYear"][TestScenarioNumber]

118
00:01:35,282 --> 00:01:35,284
45. xYear = expirationYear.replaceAll("\.0$", "")

119
00:01:35,285 --> 00:01:35,286
49. cardholderName = testdata["cardholderName"][TestScenarioNumber]

120
00:01:35,286 --> 00:01:35,288
53. addressOne = testdata["addressOne"][TestScenarioNumber]

121
00:01:35,289 --> 00:01:35,291
57. addressTwo = testdata["addressTwo"][TestScenarioNumber]

122
00:01:35,291 --> 00:01:35,293
61. city = testdata["city"][TestScenarioNumber]

123
00:01:35,293 --> 00:01:35,295
65. state = testdata["state"][TestScenarioNumber]

124
00:01:35,295 --> 00:01:35,297
69. zipCode = testdata["zipCode"][TestScenarioNumber]

125
00:01:35,298 --> 00:01:35,299
73. countryCode = testdata["countryCode"][TestScenarioNumber]

126
00:01:35,300 --> 00:01:35,301
77. action = testdata["action"][TestScenarioNumber]

127
00:01:35,302 --> 00:01:35,303
81. scheduledDate = testdata["scheduledDate"][TestScenarioNumber]

128
00:01:35,304 --> 00:01:35,305
85. xscheduledDate = scheduledDate.replaceAll("\.0$", "")

129
00:01:35,305 --> 00:01:35,306
89. totalAmount = testdata["totalAmount"][TestScenarioNumber]

130
00:01:35,307 --> 00:01:35,308
93. amount1 = testdata["amount1"][TestScenarioNumber]

131
00:01:35,308 --> 00:01:35,309
97. amount2 = testdata["amount2"][TestScenarioNumber]

132
00:01:35,310 --> 00:01:35,311
101. request = {
			    "cardInfo": {
			        "cardNumber": "$cardNumber",
			        "expirationMonth": "$expirationMonth",
			        "expirationYear": "$expirationYear",
			        "cardholderName": "$cardholderName",
			        "billingAddress": {
			            "lineOne": "$addressOne",
			            "lineTwo": "$addressTwo",
			            "city": "$city",
			            "state": "$state",
			            "zipCode": "$zipCode",
			            "countryCode": "$countryCode"
			        }
			    },
			    "scheduledPayments": [
			        {
			            "scheduledDate": "$scheduledDate",
			            "totalAmount": $totalAmount,
			            "passengerAmountAllocation": [
			                {
			                    "passengerId": "$GlobalVariable.GuestRefNumber1",
			                    "amount": $amount1
			                },
			                {
			                    "passengerId": "$GlobalVariable.GuestRefNumber2",
			                    "amount": $amount2
			                }
			            ]
			        }
			    ]
			}

133
00:01:35,312 --> 00:01:35,313
105. restRequest = JsonSlurper().parseText(request)

134
00:01:35,313 --> 00:01:35,316
109. prettyJson = JsonBuilder(restRequest).toPrettyString()

135
00:01:35,317 --> 00:01:35,318
113. println(prettyJson)

136
00:01:35,319 --> 00:01:36,156
117. sendRequestTextBox.sendKeys(prettyJson)

137
00:01:36,158 --> 00:01:36,475
121. utils.clickSendButton()

138
00:01:36,476 --> 00:01:39,483
125. delay(3)

139
00:01:39,483 --> 00:01:39,721
129. response = utils.getResponse()

140
00:01:39,722 --> 00:01:39,723
133. println(response)

141
00:01:39,723 --> 00:01:39,728
137. cancelBookingRequest = findTestObject("CancelBooking")

142
00:01:39,729 --> 00:01:43,333
141. cancelBookingResponse = sendRequest(cancelBookingRequest)

143
00:01:43,334 --> 00:01:43,336
145. cancelBookingJsonResponse = JsonSlurper().parseText(cancelBookingResponse.getResponseText())

144
00:01:43,336 --> 00:01:43,337
149. println(cancelBookingJsonResponse)

145
00:01:43,337 --> 00:01:43,338
153. validation1 = testdata["ContainsValidation"][TestScenarioNumber]

146
00:01:43,339 --> 00:01:43,340
157. println(validation1)

147
00:01:43,340 --> 00:01:43,341
161. validation2 = testdata["NotContainsValidation"][TestScenarioNumber]

148
00:01:43,341 --> 00:01:43,342
165. println(validation2)

149
00:01:43,342 --> 00:01:43,343
169. println(testdata["TestScenarioNumber"][TestScenarioNumber])

150
00:01:43,344 --> 00:01:43,347
173. assert response.contains(validation1)

151
00:01:43,347 --> 00:01:44,529
2. takeScreenshot("./screenshots/Failed_Scheduled_Add.png")

152
00:01:44,529 --> 00:01:44,558
6. println(Assertion failed: $e.message)

153
00:01:44,558 --> 00:01:44,561
10. e.printStackTrace()

154
00:01:44,561 --> 00:01:46,888
1. utils.closeBrowser()

